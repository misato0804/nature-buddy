import Head from 'next/head'
import Hero from "@/components/hero-page/Hero";
import {getSession, useSession} from "next-auth/react";
import ProtectedHero from "@/components/hero-page/ProtectedHero";
import {GetServerSidePropsContext} from "next";
import {IUserModel} from "@/lib/util/schema";
import {useEffect, useState} from "react";
import {useNotificationContext} from "@/lib/context/socketContext";
import {INotification} from "@/types/INotification";
import {IUser} from "@/types/IUser";
import mongoose from "mongoose";

type UserProps = {
    user: IUserModel
}

export default function Home({user}: UserProps) {
    const {data: session, status} = useSession()
    const {askingUser, setAskingUser, socket} = useNotificationContext()
    const [updateUser, setUpdateUser] = useState<IUser>(user)
    const [data, setData] = useState<INotification|undefined>()

    useEffect(() => {
        askingUser.name && askingUser.email && socket.emit('newUser', askingUser)

        const updateUserNotification = async (notification: INotification) => {
            await fetch('/api/user/notification', {
                method: "PATCH",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    data: notification,
                    id: user._id
                })
            })
        }

        socket.on('get_asked_to_join', (notification: INotification) => {
            console.log(notification)
            // updateUserNotification(notification)
        })
    }, [socket])

    useEffect(() => {
        session?.user && setAskingUser({
            ...askingUser,
            name: session.user.name!,
            email: session.user.email!
        })
    }, [session])

    if (status === "loading") {
        return <h1>Loading...</h1>
    }

    return (
        <>
            <Head>
                <title>Nature Buddy</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            {
                session ? <ProtectedHero user={user}/> : <Hero/>
            }
        </>
    )
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
    const session = await getSession(context)
    if (!session) {
        return {
            props: {}
        }
    }
    const email = session?.user?.email
    const res = await fetch(`http://localhost:3000/api/user`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({email})
    })
    const result = await res.json()
    const userData = result.data.user

    return {
        props: {
            user: userData
        }
    }
}